input { 
  file {
  	type => "requestmetrics"
    add_field => ["was_host", "AppCluster"] # FIXME - add the hostname of the application server
    start_position => "beginning"
    path => [
		"/path/to/input/file" # FIXME - add the correct input file
	]
	
	sincedb_path => "/dev/null" # comment this out if you want to keep the history, or if you are on windows
  }
  stdin {
  	type => "requestmetrics"
  }
}

filter {
  # handle webservices 
  grok {  
    match => [ "message", "%{GREEDYDATA}PmiRmArmWrapp I   PMRM0003I: %{DATA}current:%{DATA}time=%{NUMBER:timestamp}%{DATA}type=Web Services ((Requestor)|(Provider)) detail=%{WORD:action}:%{DATA:wsport}.%{WORD:method}\?%{DATA} elapsed=%{NUMBER:elapsed:int}"]
  	add_field => ["business_method" , "%{wsport}.%{method}"]
  }
  
  	mutate {
  		add_field => ["wsport", "unknown"]
  		replace => ["business_method" , "%{wsport}.%{method}"]
  	}
  }
  
  # handle URLs
  if [action] not in ["wsprovider", "wsrequestor"] {
  	grok {  
  		match => [ "message", "%{GREEDYDATA}PmiRmArmWrapp I   PMRM0003I: %{DATA}current:%{DATA}time=%{NUMBER:timestamp}%{DATA}type=URI detail=%{DATA:httpendpoint} elapsed=%{NUMBER:elapsed:int}"]
  		add_field => {
  			"action" => "url"
  			"business_method" => "%{httpendpoint}"
  		}
  	}
  }
  
  date {
    # Try to pull the timestamp from the 'timestamp' field (parsed above with grok). 
    match => [ "timestamp", "UNIX_MS" ]
  }
  
  mutate {
    # override host fieled
    replace => ["host" , "%{was_host}"]
    remove_field => ["message", "timestamp", "was_host", "tags", "path"]
	
    # convert data
    convert => [ "elapsed", "integer" ]
  }
}

output { 
	if [action] in ["wsprovider", "wsrequestor", "url"] {
		stdout { codec => rubydebug } 
 		elasticsearch {
			index => "logstash-requestmetrics-%{+YYYY.MM.dd}"
 		}
 	 }
}